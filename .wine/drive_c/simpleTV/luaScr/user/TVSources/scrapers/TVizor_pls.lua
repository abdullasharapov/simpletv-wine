
module('TVizor_pls', package.seeall)  
local my_file_name = "playlist.m3u"     
------ 3. название источника (латиница или кириллица)
local my_src_name  = "TVizor"             
------
------ после того как скрапер подготовлен, поместите его в папку \TVSources\AutoSetup\
------ источник занесется в TVSources вместе с настройками. 
------ если снова поместить скрапер в \AutoSetup\ настройки не затираются (!) ,
------ т.к. занесение настоек происходит только в новый источник...
----------------------------------------

--------------------------------------------------------------------------
-- Локальный фильтр для переименования каналов. Заполнять не обязательно.
-- Если встретится первое название, то оно заменяется на второе

-- переименовать каналы -------------------------------------------------------
local filter = {
    {"",""},
}
--------------------------------------------------------------------------
function GetSettings()

    local scrap_settings
	scrap_settings ={
	name	 		= my_src_name,   -- Имя источника                
	sortname 		='',			 -- имя для сортировки (если не указано, берется name)               
	scraper 		='',		     -- * Путь и название скрапера (будет автоматически присвоено)     
	m3u     		='out_TVizor.m3u', --  название m3u         
	logo     		='..\\Channel\\logo\\Icons\\TVizor.png', --  путь и файл лого относительно папки work 
	TypeSource		=1,				 -- * Тип источника: 0 - внутренний, 1 - внешний (будет автоматически присвоено 1)  
	TypeCoding		=1,				 -- Кодировка M3U (0 - ANSI, 1 - UTF8, 2 - UNICODE)         
	DeleteM3U		=1,				 -- Удалять m3u по завершению обработки (1 - включено, 0 - выключено)      
	RefreshButton   =1,				 -- Обновлять по кнопке "Обновить плей-лист" (1 - включено, 0 - выключено)    
	AutoBuild		=0,				 -- Авто-обновление (1 - включено, 0 - выключено)           
	AutoBuildDay	={0,0,0,0,0,0,0},-- Дни недели авто-обновления {вс,пн,вт,ср,чт,пт,сб}           
	LastStart		=0,				 -- Последняя успешная загрузка         
------------------------------------------------------------------------------------------------
	TVS				={				 -- Ветка настроек для загрузки в базу TVSources (1 - включено, 0 - выключено)   
		add			=1,				 -- Загружать в базу TVSources (1 - включено, 0 - выключено)           
		FilterCH	=1,				 -- Фильтровать названия каналов (1 - включено, 0 - выключено)          
		FilterGR	=1,				 -- Фильтровать названия групп каналов (1 - включено, 0 - выключено)     
		GetGroup	=1,				 -- Наследовать группу (1 - включено, 0 - выключено)     
		LogoTVG		=1},			 -- Наследовать логотип и программу передач (1 - включено, 0 - выключено)         
------------------------------------------------------------------------------------------------
	STV				={				 -- Ветка настроек для загрузки в базу SimpleTV            
		add			=1,				 -- Загружать в базу SimpleTV (1 - включено, 0 - выключено)         
		ExtFilter	=1,				 -- Создавать внешний фильтр (1 - включено, 0 - выключено)     
		FilterCH	=1,				 -- Фильтровать названия каналов (1 - включено, 0 - выключено)     
		FilterGR	=1,				 -- Фильтровать названия групп (1 - включено, 0 - выключено)          
		GetGroup	=1,				 -- Учитывать группы из M3U  (1 - включено, 0 - выключено)       
		HDGroup		=1,				 -- HD каналы отдельной группой  (1 - включено, 0 - выключено) Зависит от скрапера     
		AutoSearch	=1,				 -- Искать логотип и программу передач (1 - включено, 0 - выключено)       
		AutoNumber	=1,				 -- Автонумерация каналов (1 - включено, 0 - выключено)      
		NumberM3U	=0,				 -- Учитывать номера из M3U (1 - включено, 0 - выключено)       
		GetSettings	=1,				 -- Учитывать настройки из M3U (1 - включено, 0 - выключено)        
		NotDeleteCH =0,				 -- Не удалять отсутствующие каналы при обновлении (1 - включено, 0 - выключено)     
		TypeSkip	=1,				 -- Если канал существует в базе: 0 - пропускать, 1 - обновлять, 2 - загружать как новый 
		TypeFind	=0,				 -- ^^^^^^^^^^^^^^^^^^^^ проверять совпадение по: 0 - названию канала, 1 - адресу канала
		TypeMedia=0 ,				 -- в какой таб загружать: 0- channel,1-files,2-records,3-video
        }
	}                                                                                                                                          
	return scrap_settings
end
--------------------------------------------------------------------------
function GetVersion()
	return 1, 'UTF-8'
end
--------------------------------------------------------------------------

-------------------------------------------------------------------------- 
function GetList(UpdateID,m3u_file)

		 if UpdateID == nil then return end
		 if m3u_file == nil then return end
		 if TVSources_var.tmp.source[UpdateID] == nil then return end
		 local Source=TVSources_var.tmp.source[UpdateID]  -- Наследуем настройки источника, чтобы не таскать

	tvs_core.tvs_debug("Scraper for "..Source.name.." begin.") 	
	m_simpleTV.OSD.ShowMessage_UTF8(Source.name..' -> ',0xffff00,5)



---------------- получаем обработанную таблицу   -----------------------------    
    local outm3u, err = tvs_func.get_m3u("http://pastebin.com/raw/M48DWmiU")	 
	if err~='' then tvs_core.tvs_ShowError(err)  m_simpleTV.Common.Wait(1000) end 
	if outm3u == nil or outm3u=='' then  return '' end
    local t_pls = tvs_core.GetPlsAsTable(outm3u) 
    if not t_pls then return end
    
---------------- обрабатываем таблицу общими фильтрами  --------

    local m3ustr = tvs_core.ProcessFilterTable(UpdateID,Source,t_pls)      
	
	tvs_core.tvs_debug("Scraper for "..Source.name..": filtered 'm3u' info push into file "..m3u_file)

	local handle = io.open (m3u_file, "w+")   -- m3u_file - не меняем название, из него грузится потом все каналы
	if handle == nil then return nil end
	handle:write (m3ustr)
	handle:close ()
	
	tvs_core.tvs_debug("Scraper for "..Source.name.." end: return 'ok'.")

	return 'ok'

------------------------------------------------------------------------------------------------------------------

end 

